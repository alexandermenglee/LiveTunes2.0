(function (d3) {
    'use strict';
  
    const svg = d3.select('svg');
  
    const width = +svg.attr('width');
    const height = +svg.attr('height'); 
  
    const render = data => {
      const xValue = d => d.population;
      const yValue = d => d.country;
      const margin = { top: 20, right: 40, bottom: 20, left: 100 };
        const innerWidth = width - margin.left - margin.right;
        const innerHeight = height - margin.top - margin.bottom;
      
      const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, xValue)])
          .range([0, innerWidth]);
      
        const yScale = d3.scaleBand()
          .domain(data.map(yValue))
          .range([0, innerHeight])
          .padding(0.1);
  
        const yAxis = d3.axisLeft(yScale);
  
      const g = svg.append('g')
          .attr('transform', `translate(${margin.left},${margin.top})`);
        
      const xAxisTickFormat = number => 
          d3.format('.3s')(number)
              .replace('G', 'B');
      
      const xAxis = d3.axisBottom(xScale).tickFormat(xAxisTickFormat);
      
        yAxis(g.append('g'));
      g.append('g').call(d3.axisLeft(yScale));
      g.append('g').call(xAxis)
          .attr('transform', `translate(0,${innerHeight})`);
  
        g.selectAll('rect').data(data)
          .enter().append('rect')
              .attr('y', d => yScale(yValue(d)))
              .attr('width', d => xScale(xValue(d)))
              .attr('height', yScale.bandwidth());
    };
  
    d3.csv('data.csv').then(data => {
      data.forEach(d => {
          d.population = +d.population * 1000;
      });
        render(data); 
    });
  
  }(d3));
  
  //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgY3N2LCBzY2FsZUxpbmVhciwgbWF4LCBcbiAgICAgICAgc2NhbGVCYW5kLCBheGlzTGVmdCwgYXhpc0JvdHRvbSwgZm9ybWF0IH0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5jb25zdCB3aWR0aCA9ICtzdmcuYXR0cignd2lkdGgnKTtcbmNvbnN0IGhlaWdodCA9ICtzdmcuYXR0cignaGVpZ2h0Jyk7IFxuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb247XG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5jb3VudHJ5O1xuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiA0MCwgYm90dG9tOiAyMCwgbGVmdDogMTAwIH07XG5cdGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuXHRjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcbiAgY29uc3QgeFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICBcdC5kb21haW4oWzAsIG1heChkYXRhLCB4VmFsdWUpXSlcbiAgXHQucmFuZ2UoWzAsIGlubmVyV2lkdGhdKTtcbiAgXG5cdGNvbnN0IHlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gIFx0LmRvbWFpbihkYXRhLm1hcCh5VmFsdWUpKVxuICBcdC5yYW5nZShbMCwgaW5uZXJIZWlnaHRdKVxuICBcdC5wYWRkaW5nKDAuMSk7XG5cblx0Y29uc3QgeUF4aXMgPSBheGlzTGVmdCh5U2NhbGUpO1xuXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xuXHRcbiAgY29uc3QgeEF4aXNUaWNrRm9ybWF0ID0gbnVtYmVyID0+IFxuICBcdGZvcm1hdCgnLjNzJykobnVtYmVyKVxuICBcdFx0LnJlcGxhY2UoJ0cnLCAnQicpO1xuICBcbiAgY29uc3QgeEF4aXMgPSBheGlzQm90dG9tKHhTY2FsZSkudGlja0Zvcm1hdCh4QXhpc1RpY2tGb3JtYXQpO1xuICBcblx0eUF4aXMoZy5hcHBlbmQoJ2cnKSk7XG4gIGcuYXBwZW5kKCdnJykuY2FsbChheGlzTGVmdCh5U2NhbGUpKTtcbiAgZy5hcHBlbmQoJ2cnKS5jYWxsKHhBeGlzKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG5cblx0Zy5zZWxlY3RBbGwoJ3JlY3QnKS5kYXRhKGRhdGEpXG4gIFx0LmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgXHRcdC5hdHRyKCd5JywgZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCd3aWR0aCcsIGQgPT4geFNjYWxlKHhWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignaGVpZ2h0JywgeVNjYWxlLmJhbmR3aWR0aCgpKTtcbn07XG5cbmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuICBkYXRhLmZvckVhY2goZCA9PiB7XG4gIFx0ZC5wb3B1bGF0aW9uID0gK2QucG9wdWxhdGlvbiAqIDEwMDA7XG4gIH0pO1xuXHRyZW5kZXIoZGF0YSk7IFxufSk7XG5cblxuXG5cblxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJzZWxlY3QiLCJzY2FsZUxpbmVhciIsIm1heCIsInNjYWxlQmFuZCIsImF4aXNMZWZ0IiwiZm9ybWF0IiwiYXhpc0JvdHRvbSIsImNzdiJdLCJtYXBwaW5ncyI6Ijs7O0VBR0EsTUFBTSxHQUFHLEdBQUdBLFNBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7RUFFMUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7RUFFbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJO0lBQ3JCLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO0dBQzlELE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7R0FDdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7SUFFdkQsTUFBTSxNQUFNLEdBQUdDLGNBQVcsRUFBRTtNQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVDLE1BQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztNQUM5QixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQzs7R0FFMUIsTUFBTSxNQUFNLEdBQUdDLFlBQVMsRUFBRTtNQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztNQUN4QixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7TUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztHQUVoQixNQUFNLEtBQUssR0FBR0MsV0FBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztJQUU5QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztNQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFL0QsTUFBTSxlQUFlLEdBQUcsTUFBTTtLQUM3QkMsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztPQUNuQixPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztJQUVyQixNQUFNLEtBQUssR0FBR0MsYUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQzs7R0FFOUQsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQ0YsV0FBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO01BQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O0dBRXBELENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztNQUMzQixLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO09BQ3JCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDckMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztHQUN2QyxDQUFDOztBQUVGRyxRQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtJQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSTtLQUNqQixDQUFDLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7S0FDcEMsQ0FBQyxDQUFDO0dBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ2IsQ0FBQyxDQUFDOzs7OyJ9